apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: create-ec2-instance
  title: Create an EC2 Instance
  description: Create an Instance to deploy your application
  tags: ['recommended']
spec:
  owner: guests
  type: service
  parameters:
    - title: EC2 Instance Creation
      required:
         - Environment
         - InstanceName
         - Region
         - InstanceType
         - InstanceCount
      properties:
        Environment:
          title: Environment.
          type: string
          description: Environment
          ui:autofocus: true
          ui:options:
            rows: 3
          enum:
            - Dev
            - Stage
            - Prod

        InstanceName:
          title: Instance Name.
          type: string
          description: Name of the Instnace to be created.
          ui:options:
            rows: 3

        Region:
          title:  AWS Region
          type: string
          description: Name of the region where you want to create your create-ec2-instance eg:- us-east-1, ap-south-1 etc.

        InstanceType:
          title: Type of Instance.
          type: string
          description: Type of the instance that you want to deploy, for eg:- t2.medium, t3.medium etc.
          enum:
            - t2.medium
            - t2.small
            - t2.micro
            - t3.medium

        InstanceCount:
          title: Number of Instances
          type: string
          description: Number Instnace to be created.

        action:
          title: action
          type: string
          description: What action do you want to perform? Create or delete?
          enum:
            - apply
            - destroy

    # - title: Choose a Repository Location
    #   required:
    #     - repoUrl
    #   properties:
    #     repoUrl:
    #       title: Location of the repository
    #       type: string
    #       ui:field: RepoUrlPicker
    #       ui:options:
    #         allowedHosts:
    #           - github.com

  steps:
    # Getting the all the files/details from the template
    - id: fetch-base
      name: Fetching Details from content folder
      action: fetch:template
      input:
        url: ./content  # Location of the content directory where catlog-info.yaml file is present for the template
        values:
          name: ${{ parameters.InstanceName}}

     # This step publishes the contents of the working directory to GitHub.
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: 'This is github repo'
        repoUrl: 'https://github.com/yogithakakarla/terraform-ec2/actions/'



# Triggering CI-CD to create resource in our case github action. 
    - id: github-action
      name: Starting GitHub action
      action: github:actions:dispatch
      input:
        workflowId:  create-ec2.yml # ID of GitHub action WorkFlow
        repoUrl: 'github.com?repo=terraform-ec2&owner=yogithakakarla'
        branchOrTagName: 'main'
        workflowInputs:
          instanceName: ${{ parameters.InstanceName }}
          awsRegion: ${{ parameters.Region }}
          instanceType: ${{ parameters.InstanceType }}
          action: ${{ parameters.action }}
          environment: ${{ parameters.Environment }}
          instanceCount: ${{ parameters.InstanceCount }}

  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
     
          
# # Registering new component in the catalog of backstage.
#     - id: register
#       name: Registering the new Component 
#       action: catalog:register
#       input:
#         repoContentsUrl: ${{steps['publish'].output.repoContentsUrl }}
#         catalogInfoPath: '/component-info.yaml' # where the info of the catalog is stored.

# Output links  are displayed to the user after the template execution.
  # output:
  #   links:
  #     - title: Repository
  #       url: ${{ steps['publish'].output.remoteUrl }}
  #     - title: Open in catalog
  #       icon: catalog
  #       entityRef: ${{ steps['register'].output.entityRef }}

   
